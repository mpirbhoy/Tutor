For Security, we are using two preventive measures:
1. Authorization
2. Prevenitng XSS Attacks

1. Authorization:-
We implemented proper authorization such that for certain requests, we make sure that the user is authorized for that request. Not only is certain requests not available for certain users to initiate on the client side (e.g. getting page to update another user's profile details). But it is also the case that even if the request is sent to the server using some other way, the server will make sure that the user is authorized for the request.

Also, admins are automatically assigned for first registered user and they can delete threads created by any users.

2. Preventing XSS Attacks:-
We are preventing XSS Attacks by santizing the output. That is all output for all requests are checked to see if there is any malicious code which is then sanitized so it is just string representations. E.g., javascript script input into the comments would not be viewed on the client side as scripts at all as they would all be sanitized. This would take care of stored XSS attack, reflected XSS attack and DOM-based XSS attack. 

The reason why output sanitization is preferable to input sanitization is that there may be instances where people want to post some characters which would then be changed BEFORE being recorded in the database e.g. if you wish to store content of message because it is important or if we you want to know the raw input of malicious data being input in the system. Also, if there is any other input to the system which wasn't taken care of, the output will still be sanitized e.g. in the case where the access to the database is compromised. The users will still not be affected as the output is sanitized.

We implemented this using escapehtml function in controller.js. This function sanitizes the string so that it is safe for being sent to the client. We used it in all the relevant areas. 